What happens when you initialize a repository? Why do you need to do it?

  It basicly just creates a directory calles ".git" in which all the necessary
  meta data is stored needed for git working as an version control system.
  Of cause all files/data inside ".git" is initialized, so that git "knows" of
  untracked files, current brach, etc. -



How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The working directory is your actual done work. From there, you select what
  should be included in the next commit by first gathering files (new ones or
  changed ones) together in the staging area to form a logical change unit.
  When you are pleased you can do a commit and repeat this as often as you feel
  like it is needed to do so. You can even choose to discard files completly
  and thus they'll never hit the staging area and never will be commited.
  You have complete controll over the "logical change unit size" but also
  prevent cluttering the repositories commit history with unecessary "do and
  immediately undo" commits.


How can you use the staging area to make sure you have one commit per logical
change?

  You can use "git status" and "git diff" to see which files have been edited
  and what has changed. Then you can use "git add" to add only the files, which
  make up a single logical change. You can then double check with "git diff"
  and "git diff --staged" that you've done correctly. Finaly <ou can do the
  commit and start over for the next logical change if necessary.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  It might be useful to create a new brach to implement a feature, either
  because the feature might be experimental and it's unsure if it get's into
  the final product or because it's "dangerous" and might brake the code or
  because it's hard and long lasting work to get it implemented and you want
  to still have a working version without the new feature.
  Other reasons for creating branches might be to mark different release
  versions or to create a demo version with a reduced feature set or do a
  portations to diffenerent platforms.


How do the diagrams help you visualize the branch structure?

  This is a strange question. Well, a diagram makes the branch structure
  visible... that's all to it. You can see the relations between the branches
  and which parent (or "ancester") they have in common. Although not mentioned
  in the lesson so far, I'm pretty sure you cannot only see split points but
  also merging point. Merging point should be even easier to spot, since every
  commit stores it's signle parent and I guess that's also true for multiple
  parents ...maybe whole patchwork families. ;)


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

