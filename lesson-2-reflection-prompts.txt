What happens when you initialize a repository? Why do you need to do it?

  It basicly just creates a directory calles ".git" in which all the necessary
  meta data is stored needed for git working as an version control system.
  Of cause all files/data inside ".git" is initialized, so that git "knows" of
  untracked files, current brach, etc. -



How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The working directory is your actual done work. From there, you select what
  should be included in the next commit by first gathering files (new ones or
  changed ones) together in the staging area to form a logical change unit.
  When you are pleased you can do a commit and repeat this as often as you feel
  like it is needed to do so. You can even choose to discard files completly
  and thus they'll never hit the staging area and never will be commited.
  You have complete controll over the "logical change unit size" but also
  prevent cluttering the repositories commit history with unecessary "do and
  immediately undo" commits.


How can you use the staging area to make sure you have one commit per logical
change?



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?



How do the diagrams help you visualize the branch structure?



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

