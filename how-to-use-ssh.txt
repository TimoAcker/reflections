
//////////////////////////////////////////////////////////////////////////////
//                                                                          //
//                  How to use SSH instead of HTTPS in Git                  //
//                °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°                //
//                      tutorial for GitHub and GitLab                      //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////



1.  Open a Command Line Interface
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  Windows: open Git Bash


  Linux:  open Terminal



2.  Check for existing SSH keys
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  2.1  You don't have to use an already existing SSH key!
       Some recommend to use one new unique key per Server.
       If you want to create a new key jump to step "2."


  2.2  List all files in your .ssh directory using

         $ ls -al ~/.ssh


  2.3  Search the list for a private key you want to use jump to step "4."
       If you do not find a private key you want to use move on to step "3."



3.  Generate a new SSH key
°°°°°°°°°°°°°°°°°°°°°°°°°°

  3.1  Run the following command line with your GitHub email address
       to create a new ssh key, using your email address as a label:

         $ ssh-keygen -t rsa -b 4096 -C "your_github_email@example.com"


  3.2  On "Enter a file in which to save the key" just press Enter to
       save the SSH key in the default directory with the deafault
       file name (that is what is shown between the parentheses).
       Remember or temporarily note down the path and file name!


  3.3  On "Enter passphrase" you may enter a passphrase as
       an additional layer of security or just hit enter.
       Remember or temporarily note down the passphrase!


  3.4  On "Enter same passphrase again" reenter same as in step "3.3"



4.  Add the SSH key to the ssh-agent
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  4.1  Run the following command line, while replacing [private_key] with
       the filename (incl. path) of your private SSH key - that is the one
       WITHOUT the ".pub" file extension (this step MAY be redundant if
       you used the default name "~/.ssh/id_rsa" when generating the key):

         $ ssh-add [private_key]


    4.1.1  If you get the error message "Could not open a connection to your
           authentication agent." then either

             a) jump to step "4.2" to manually launch the ssh-agent

             - or -

             b) jump to step "4.3" to setup automatic launching the ssh-agent

           If you get NO error message, then go on with step "3.1.2"


    4.1.2  On "Enter passphrase for [private_key]:" enter the passphrase you
           have entered at step "3.3" and jump to step "5.".


  4.2  To start the ssh-agent manually in the background enter the following
       command line and jump back to step "4.1" afterwards.

         $ eval $(ssh-agent -s)


  4.3  To setup automatic launching the ssh-agent add the following lines to
       your "~/.profile" or "~/.bashrc" file (or create one of these files),
       restart Git Bash and jump back to step "4.1" afterward.
       (REMARK: in my case only "~/.profile" worked, but not "~/.bashrc")

           #############################
           ## launching the ssh-agent ##
           #############################
           env=~/.ssh/agent.env
           agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }
           agent_start () {
             (umask 077; ssh-agent >| "$env")
             . "$env" >| /dev/null ; }
           agent_load_env
           #
           # agent_run_state:
           #   0 = agent running w/ key;
           #   1 = agent w/o key;
           #   2 = agent not running
           #
           agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)
           if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
             agent_start
             ssh-add
           elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
             ssh-add
           fi
           unset env



5a.  Add the SSH key to GitHub (for GitLab see "5b.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  5a.1  Open your favorite browser, go to "https//github.com" and sign in


  5a.2  In the upper right corner of the website click on your profile photo
        and select "Settings".


  5a.3  In the side bar under "Personal settings" click on "SSH and GPG keys"


  5a.4  Right next to "SSH keys" click on the button "New SSH key"


  5a.5  In the field "Title" enter a descriptive name like "home office",
        "old Laptop", "Amiga 1200", "Business C=64" or whatever fits. ;)


  5a.6  Copy your public SSH key to the clipboar by either

          b) Opening your public ssh key (e.g. "~/.ssh/id_rsa.pub" if you had
             chosen the default name) with your favorite text editor and copy
             the whole text to the clipboard

          - or -

          a) running the following command line (replace [your_public_key]
             with the actual name you have entered at step "2.2"):

               $ clip < [your_public_key].pub

             E.g. if you have chosen the dafault name enter:

               $ clip < ~/.ssh/id_rsa.pub


  5a.7  Paste your public ssh key into the "key" field and click "Add SSH key".


  5a.8  It may happen, that you need to reender your GitHub password.
        You must enter you **GitHub** password, NOT your ssh passphrase!


  5a.9  Congratulations! You ssh key should be listed now and fully working!
        Go on with Step "6." to test your SSH connection and permanently add
        GitHub to the list of known hosts.



5b.  Add the SSH key to GitLab (for GitHub see "5a.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  5b.1  Open your favorite browser, go to "https//github.com" and sign in


  5b.2  In the upper right corner of the website click on your profile photo
        and select "Settings".


  5b.3  In the upper menu bar click on "SSH keys"


  5b.4  Copy your public SSH key to the clipboar by either

          b) Opening your public ssh key (e.g. "~/.ssh/id_rsa.pub" if you had
             chosen the default name) with your favorite text editor and copy
             the whole text to the clipboard

          - or -

          a) running the following command line (replace [your_public_key]
             with the actual name you have entered at step "2.2"):

               $ clip < [your_public_key].pub

             E.g. if you have chosen the dafault name enter:

               $ clip < ~/.ssh/id_rsa.pub


  5b.5  Paste your public ssh key into the "key" field


  5b.5  You may change the field "Title" ti a descriptive name like
        "home office", "old laptop", "Amiga 1200", "C=64" or whatever fits. ;)


  5b.6  Click the green "Add key" button


  5b.7  It may happen, that you need to reenter your GitLab password.
        You must enter you **GitLab** password, NOT your ssh passphrase!


  5b.8  Congratulations! You ssh key should be listed now and fully working!
        Go on with Step "6." to test your SSH connection and permanently add
        GitHub to the list of known hosts.



6a.  Test SSH connection and add GitHub to known hosts (for GitLab see "6b.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  6a.1  Enter the following commandline:

          $ ssh -T git@github.com


  6a.2  You may see a warning similar to the following:
┌────────────────────────────────────────────────────────────────────────────┐
│ The authenticity of host 'github.com (192.30.252.1)' can't be established. │
│ RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. │
│ Are you sure you want to continue connecting (yes/no)?                     │
└────────────────────────────────────────────────────────────────────────────┘

        Or you may see a warning similar to this (most likely you did not
        generate a new ssh key like explained step "3."):
┌────────────────────────────────────────────────────────────────────────────┐
│ The authenticity of host 'github.com (192.30.252.1)' can't be established. │
│ RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.    │
│ Are you sure you want to continue connecting (yes/no)?                     │
└────────────────────────────────────────────────────────────────────────────┘


  6a.3  Check the fingerprint. If it matches one of those in step "6a.2", then
        everything should be OK, so you may enter "yes".


  6a.4  You MAY get the following message:

          Warning: Permanently added 'github.com,192.30.253.112'
          (RSA) to the list of known hosts.


        If you then get the following error message, it might have
        taken you to long to type "yes" at step "6a.3" causing a
        timeout and you just have to repeat from step "6a.1":

          Authentication failed.


        And if everything is OK you MUST also or at least get this one:

          Hi [your_user_name]! You've successfully authenticated,
          but GitHub does not provide shell access.


        But if you are getting this error message:
          "Error: Permission denied (publickey)"
        Then you should checkout the GitHub help:
          https://help.github.com/articles/error-permission-denied-publickey/



6b.  Test SSH connection and add GitLab to known hosts (for GitHub see "6b.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  6b.1  Enter the following commandline:

          $ ssh -T git@gitlab.com


  6b.2  You may see a warning similar to the following:
┌────────────────────────────────────────────────────────────────────────────┐
│The authenticity of host 'gitlab.com (52.167.219.168)' can't be established.│
│ECDSA key fingerprint is SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw.│
│Are you sure you want to continue connecting (yes/no)?                      │
└────────────────────────────────────────────────────────────────────────────┘


  6b.3  Check the fingerprint. If it matches the one of step "6b.2",
        then everything should be OK, so you may enter "yes".


  6b.4  You MAY get the following message:

          Warning: Permanently added 'gitlab.com,52.167.219.168'
          (ECDSA) to the list of known hosts.


        If you then get the following error message, it might have
        taken you to long to type "yes" at step "6b.3" causing a
        timeout and you just have to repeat from step "6b.1":

          Authentication failed.


        And if everything is OK you MUST also or at least get this one:

          Welcome to GitLab, [your_user_name]!


        But if you are getting this warning:
          "Error: Permission denied (publickey)"
        Then you may search the GitLab docs for a solution:
          https://docs.gitlab.com/



7a.  Get SSH URL for your repository on GitHub (for GitLab see "7b.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  7a.1  Open your favorite browser, go to "https://github.com" and sign in


  7a.2  Open the repository you like to work with


  7a.3  Click the green "Clone or download" button


  7a.4  If you see "Clone with HTTPS" and an address like
        "https://github.com/MyUserName/myproject.git" just
        click on "Use SSH" in the upper right box corner.


  7a.5  If you see "Clone with SSH", then you are right
        and the address should look something like
        "git@github.com:MyUserName/myproject.git"


  7a.6  Use the URL from step "7a.5" with the command line
       "git remote add [remote_name] [URL]" or
       "git clone [URL]" or
       "git remote add [remote_name] [URL]" or
       "git remote set-url [remote_name] [URL]" etc.
       (please use "git help <...>" for more information)



7b.  Get SSH URL for your repository on GitLab (for GitHub see "7a.")
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

  7b.1  Open your favorite browser, go to "https://gitlab.com" and sign in


  7b.2  Open the repository you like to work with


  7b.3  Directly under the project title and its
        description you should see a text field.


  7b.4  If you see "HTTPS" to the left of the text field and
        the address inside the text field looks something like
        "https://gitlab.com/MyUserName/myproject.git", then
        just click on "HTTPS" and select "SSH".


  7b.5  If you see "SSH" to the left of the text field, then you are right
        and the address inside the text field should look something like
        "git@gitlab.com:MyUserName/myproject.git"


  7b.6  Use the URL from step "7b.5" with the command line
       "git remote add [remote_name] [URL]" or
       "git clone [URL]" or
       "git remote add [remote_name] [URL]" or
       "git remote set-url [remote_name] [URL]" etc.
       (please use "git help <...>" for more information)
